setwd("../data")
setwd("..//data")
setwd("..\data")
getwd
getwd()
setwd("~/data")
setwd("./data")
getwd()
train_data <- read.csv("train.csv", header = T, sep = ",")
test_data <- read.csv("test.csv", header = T, sep = ",")
trn_nw <- train_data[train_data$new_window == "yes",]
ex_yaw <- grep(names("yaw",train_data)
)
ex_yaw <- grep("yaw",names(train_data))
trn_nw <- trn_nw[,ex_yaw]
trn_nw <- trn_nw[,!ex_yaw]
install.packages(caret)
install.packages("caret")
rf <- randomForest(classe ~. , data = trn_nw, na.action = na.rm)
library(randomForest)
rf <- randomForest(classe ~. , data = trn_nw, na.action = na.rm)
rf <- randomForest(classe ~. , data = trn_nw)
rf <- randomForest(classe ~., data = trn_nw)
rf <- randomForest(classe ~., data=trn_nw)
trn_nw <- train_data[train_data$new_window == "yes",]
#remove yaw metrics
ex_yaw <- grep("yaw",names(train_data)) #find cols with yaw in the title (errors)
trn_col_cnt <- 1:length(train_data)     #get a vector of the col numbers
ex_yaw_col <- !(trn_col_cnt %in% ex_yaw)#get a boolean vector to ...
ex_yaw_vec <- trn_col_cnt[ex_yaw_col==T]#get column numbers
trn_nw <- trn_nw[,ex_yaw_vec]
rf <- randomForest(classe ~., data=trn_nw)
type(trn_nw)
class(trn_nw)
class(trn_nw$classe)
class(trn_nw$.)
class(trn_nw$cols)
col.class(trn_nw)
clasS(trn_nw[,1])
clasS(trn_nw[1,1])
class(trn_nw)
clasa(trn_nw[,1])
class(trn_nw[,1])
for(x in trn_col_cnt){
if(class(trn_nw[,x])=="factor"){
trn_nw[,x] <- as.numeric(trn_nw[,x])
}
for(x in ex_yaw_vec){
if(class(trn_nw[,x])=="factor"){
trn_nw[,x] <- as.numeric(trn_nw[,x])
}
ex_yaw_vec
rf <- randomForest(classe ~.,
rf <- randomForest(classe ~., data=trn_nw)
rf <- randomForest(factor(classe) ~., data=trn_nw)
trn_nw <- train_data[train_data$new_window == "no",]
trn_nw.na <- is.na(trn_nw)
library(plyr)
trn_nw.na <- sapply(trn_nw, FUN = is.na)
trn_nw.na <- lapply(trn_nw, FUN = is.na)
trn_nw.na <- apply(trn_nw, FUN = is.na)
table(trn_nw.na)
smmry <- summary(trn_nw)
smmry
cm <- colMeans(trn_nw)
cm <- colSums(trn_nw, na.rm=T)
update.packages()
y
library(caret)
library(ggplot2)
library(randomForest)
library(plyr)
istall.packages(c("caret","ggplot2","randomForest","plyr","dplyr"))
install.packages(c("caret","ggplot2","randomForest","plyr","dplyr"))
inTrain <- createDataPartition(factor(classe), p = .6, list = F, data = trn_nw)
library(caret)
library(ggplot2)
library(randomForest)
library(plyr)
inTrain <- createDataPartition(factor(classe), p = .6, list = F, data = trn_nw)
inTrain <- createDataPartition(factor(classe), p = .6, list = F)
inTrain <- createDataPartition(trn_nw$classe, p = .6, list = F)
train <- trn_nw[inTrain,]
test <- trn_nw[-inTrain,]
source('~/.active-rstudio-document', echo=TRUE)
setwd("./data")
train_data <- read.csv("train.csv", header = T, sep = ",")
test_data <- read.csv("test.csv", header = T, sep = ",")
source('~/GitHub/pml_proj/clean_na_cols.R')
clean_train <- clean_na_cols(train_data)
tcol <- train_data$max_roll_belt
sum(is.na(tcol))
lencth(train_data)
length(train_data)
nrow(tcol)
nrow(train_data)
length(tcol)
ncol(train_data)
ncol(tcol)
source('~/GitHub/pml_proj/clean_na_cols.R')
clean_train <- clean_na_cols(train_data)
.Primitive("[")
source('~/GitHub/pml_proj/clean_na_cols.R')
clean_train <- clean_na_cols(train_data)
na_cnt <- sum(is.na(tcol))
rw_cnt <- length(tcol)
na_cnt/rw_cnt
ans
na_prop <- na_cnt/rw_cnt
if(na_prop < .9){print 123}
if(na_prop < .9){123}
if(na_prop < .9){print(123)}
if(na_prop > .9){print(123)}
source('~/GitHub/pml_proj/clean_na_cols.R')
clean_train <- clean_na_cols(train_data)
if(na_prop < .9){print(123)}
if(na_prop > .9){print(123)}
source('~/GitHub/pml_proj/clean_na_cols.R')
clean_train <- clean_na_cols(train_data)
source('~/GitHub/pml_proj/clean_na_cols.R')
clean_train <- clean_na_cols(train_data)
k <- data.frame(c= integer())
k
cbind(k,1)
rbind(k,1)
k
k <- rbind(k,1)
k
k <- rbind(k,1)
k
k$c
k$x1
k$A1
k$X1
source('~/GitHub/pml_proj/clean_na_cols.R')
k<-vector()
k<-vector(mode=integer())
k<-as.numeric(vector())
source('~/GitHub/pml_proj/clean_na_cols.R')
K <- rbind(k,1)
k <- rbind(k,1)
k
test_data[,k]
test_data[,1]
head(test_data)
head(test_data[,1])
clean_train <- clean_na_cols(train_data)
View(K)
View(k)
View(test_data)
clean_train <- clean_na_cols(train_data)
source('~/GitHub/pml_proj/clean_na_cols.R')
clean_train <- clean_na_cols(train_data)
clean_train <- clean_train[,-1:7]
clean_train <- clean_train[,-(1:7)]
View(clean_train)
clean_train <- clean_na_cols(train_data)
blnk_col <- clean_train$kurtosis_roll_belt
summary(blnk_col)
summary(as.numerif(blnk_col))
summary(as.numeric(blnk_col))
blnk_col == ""
sum(blnk_col == "")
source('~/GitHub/pml_proj/clean_na_cols.R')
clean_train <- clean_na_cols(train_data)
source('~/GitHub/pml_proj/clean_na_cols.R')
clean_train <- clean_train[,-(1:7)]
library(caret)
library(ggplot2)
library(randomForest)
library(plyr)
inTrain <- createDataPartition(clean_train$classe, p = .6, list = F)
train <- trn_nw[inTrain,]
test <- trn_nw[-inTrain,]
inTrain <- createDataPartition(clean_train$classe, p = .1, list = F)
training <- clean_train[inTrain,]
testing <- clean_train[-inTrain,]
library(caret)
library(ggplot2)
library(randomForest)
library(plyr)
library(e1071)
inTrain <- createDataPartition(clean_train$classe, p = .1, list = F)
training <- clean_train[inTrain,]
testing <- clean_train[-inTrain,]
model <- train(classe ~ ., data = training, preProcess = c("center","scale"), method = "gbm" )
tst <- predict(model, newdata = testing)
confusionMatrix(testing$classe, tst)
model <- train(classe ~ ., data = training, preProcess = c("center","scale"), method = "knn" )
tst <- predict(model, newdata = testing)
confusionMatrix(testing$classe, tst)
model <- train(classe ~ ., data = training, preProcess = c("center","scale"), method = "svm" )
svm_mod <- svm(classe ~. , data = training)
tst2 <- predict(svm_mod, newdata = testing)
confusionMatrix(testing$classe, tst2)
install.packages("word2vec")
install.packages("tmcn")
install.packages("tm")
install.packages("tmcn.word2vec", repos="http://R-Forge.R-project.org")
tm
tm()
?tm
library(tm)
